import R from 'ramda'

export const getPhoneById = (state, id) => R.prop(id, state.phones)// find data by id

export const getPhones = (state, ownProps) => { // find data in state
	const activeCategoryId = getActiveCategoryId(ownProps)
	const appleSearch = item => R.contains(// are substring in string
		state.phonesPage.search,
		R.prop('name', item)
	)
	const applyCategory = item => R.equals(
		activeCategoryId,
		R.prop('categoryId', item)
	)

	const phones = R.compose( // compose few methods
		R.filter(appleSearch),
		R.when(R.always(activeCategoryId), R.filter(applyCategory)),// when activeCategoryId -> R.filter(applyCategory)
		R.map(id => getPhoneById(state, id))
	)(state.phonesPage.ids)

	return phones
}

export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
	const totalPrice = R.compose(
		R.sum,
		R.pluck('price'), // get only price..... array of strings of prices
		R.map(id => getPhoneById(state, id))// array of phones object in the basket
	)(state.basket)
	return totalPrice
}

export const getCategories = state => R.values(state.categories) // get all values of object and move them to array
export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps) // 

export const getBasketPhonesWithCount = state => {
	const uniqueIds = R.uniq(state.basket)
	const phoneCount = id => R.compose(
		R.length,
		R.filter(basketId => R.equals(id, basketId))
	)(state.basket)
	const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone) // return new phone whitch has field 'count'
	const phones = R.compose(
		R.map(phoneWithCount),
		R.map(id => getPhoneById(state, id))
	)(uniqueIds)
	return phones
}